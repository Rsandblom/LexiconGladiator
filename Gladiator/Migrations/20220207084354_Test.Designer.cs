// <auto-generated />
using System;
using Gladiator.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Gladiator.Migrations
{
    [DbContext(typeof(GladiatorContext))]
    [Migration("20220207084354_Test")]
    partial class Test
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Gladiator.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "2860a746-0879-412d-aadf-5893e2edfd00",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c4d33019-61ef-4ef7-8cfb-67d20e4cc41e",
                            Email = "admin@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "Nimda",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MAIL.COM",
                            NormalizedUserName = "ADMIN@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOY9vgGq69HRQcYWkxqkkY7la6qGxA1hckNRCb3j2PZSbuV918TcxBSKfQKnPMFjGA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "60e629de-5363-44ad-9944-e05a7794bee2",
                            TwoFactorEnabled = false,
                            UserName = "admin@mail.com"
                        },
                        new
                        {
                            Id = "da3f716e-dc6a-4988-b43e-f35f2ed7ea94",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5937022c-dfe8-4d8a-a624-f60ae36a9a57",
                            Email = "player@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Player1",
                            LastName = "P1",
                            LockoutEnabled = false,
                            NormalizedEmail = "PLAYER@MAIL.COM",
                            NormalizedUserName = "PLAYER@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDPVGuGEBOf15YQOnxwwbv3NgJWeNaB3zh3W0BN4VzpB6kosWbDD2DZZLulxvC1EfQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6b0555f7-ff45-4182-9872-2877623ae740",
                            TwoFactorEnabled = false,
                            UserName = "player@mail.com"
                        },
                        new
                        {
                            Id = "66d374f7-8e54-417e-9800-57a5a686f4aa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cfff122d-539d-4869-a9d5-12237104d302",
                            Email = "player2@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Player2",
                            LastName = "P2",
                            LockoutEnabled = false,
                            NormalizedEmail = "PLAYER2@MAIL.COM",
                            NormalizedUserName = "PLAYER2@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAkNRpKQ32G1d1wgycuQQx9bsEyasrmt6vkFfqIZDFxnvgMgowXWg2MXqEiXDuFjAA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "309cc760-6419-4c58-9b9f-ff73b3a01438",
                            TwoFactorEnabled = false,
                            UserName = "player2@mail.com"
                        });
                });

            modelBuilder.Entity("Gladiator.Models.Arena", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Arenas");

                    b.HasData(
                        new
                        {
                            Id = new Guid("341b68d0-6f19-4260-b056-2433f1ab49ab"),
                            Difficulty = 10,
                            Name = "The Cave"
                        },
                        new
                        {
                            Id = new Guid("7813a8bf-ba83-4d93-b0de-4ed7f7c11c81"),
                            Difficulty = 10,
                            Name = "The Rock"
                        },
                        new
                        {
                            Id = new Guid("8eafa150-d6d4-4909-8391-13c6c55f84d6"),
                            Difficulty = 10,
                            Name = "The Firepit"
                        },
                        new
                        {
                            Id = new Guid("5e22f9cc-175f-41b8-8c21-13d18fe28606"),
                            Difficulty = 10,
                            Name = "The Dragons den"
                        });
                });

            modelBuilder.Entity("Gladiator.Models.Fight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AdversaryCurrentHp")
                        .HasColumnType("int");

                    b.Property<int>("AdversaryId")
                        .HasColumnType("int");

                    b.Property<Guid>("ArenaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ChallengerCurrentHp")
                        .HasColumnType("int");

                    b.Property<int>("ChallengerId")
                        .HasColumnType("int");

                    b.Property<int>("GoldWon")
                        .HasColumnType("int");

                    b.Property<bool>("HasAdversaryJoinedFight")
                        .HasColumnType("bit");

                    b.Property<bool>("HasChallengerJoinedFight")
                        .HasColumnType("bit");

                    b.Property<bool>("HasEnded")
                        .HasColumnType("bit");

                    b.Property<bool>("HasStarted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdversaryAllowedToAttack")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsChallengerAllowedToAttack")
                        .HasColumnType("bit");

                    b.Property<int>("Round")
                        .HasColumnType("int");

                    b.Property<int?>("WinnerFighterId")
                        .HasColumnType("int");

                    b.Property<int>("XpChange")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdversaryId");

                    b.HasIndex("ArenaId");

                    b.HasIndex("ChallengerId");

                    b.HasIndex("WinnerFighterId");

                    b.ToTable("Fights");
                });

            modelBuilder.Entity("Gladiator.Models.Fighter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BodyModifierId")
                        .HasColumnType("int");

                    b.Property<int>("Def")
                        .HasColumnType("int");

                    b.Property<int>("HeadModifierId")
                        .HasColumnType("int");

                    b.Property<int>("Hp")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOpponent")
                        .HasColumnType("bit");

                    b.Property<int>("LeftHandModifierId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RightHandModifierId")
                        .HasColumnType("int");

                    b.Property<int>("Str")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Xp")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Gladiators");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BodyModifierId = 14,
                            Def = 0,
                            HeadModifierId = 13,
                            Hp = 10,
                            IsDeleted = false,
                            IsOpponent = true,
                            LeftHandModifierId = 16,
                            Name = "Modifier Creator",
                            RightHandModifierId = 15,
                            Str = 1,
                            UserId = 1,
                            Xp = 0
                        },
                        new
                        {
                            Id = 2,
                            BodyModifierId = 14,
                            Def = 0,
                            HeadModifierId = 13,
                            Hp = 10,
                            IsDeleted = false,
                            IsOpponent = true,
                            LeftHandModifierId = 16,
                            Name = "Anna",
                            RightHandModifierId = 15,
                            Str = 1,
                            UserId = 1,
                            Xp = 0
                        },
                        new
                        {
                            Id = 3,
                            BodyModifierId = 18,
                            Def = 1,
                            HeadModifierId = 17,
                            Hp = 10,
                            IsDeleted = false,
                            IsOpponent = false,
                            LeftHandModifierId = 20,
                            Name = "Std Gladiator 1",
                            RightHandModifierId = 19,
                            Str = 1,
                            UserId = 1,
                            Xp = 0
                        },
                        new
                        {
                            Id = 4,
                            BodyModifierId = 22,
                            Def = 1,
                            HeadModifierId = 21,
                            Hp = 10,
                            IsDeleted = false,
                            IsOpponent = false,
                            LeftHandModifierId = 24,
                            Name = "P1 Gladiator 1",
                            RightHandModifierId = 23,
                            Str = 1,
                            UserId = 2,
                            Xp = 0
                        },
                        new
                        {
                            Id = 5,
                            BodyModifierId = 26,
                            Def = 1,
                            HeadModifierId = 25,
                            Hp = 10,
                            IsDeleted = false,
                            IsOpponent = false,
                            LeftHandModifierId = 28,
                            Name = "P2 Gladiator 1",
                            RightHandModifierId = 27,
                            Str = 1,
                            UserId = 3,
                            Xp = 0
                        });
                });

            modelBuilder.Entity("Gladiator.Models.Modifiers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Def")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FighterId")
                        .HasColumnType("int");

                    b.Property<int>("Hp")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Str")
                        .HasColumnType("int");

                    b.Property<int>("TypeOfGear")
                        .HasColumnType("int");

                    b.Property<int>("Xp")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FighterId");

                    b.ToTable("Modifiers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Def = 1,
                            Description = "Hardened leather cap",
                            FighterId = 1,
                            Hp = 0,
                            Name = "Leather cap",
                            Price = 10,
                            Str = 0,
                            TypeOfGear = 0,
                            Xp = 0
                        },
                        new
                        {
                            Id = 2,
                            Def = 2,
                            Description = "Plastic and styrofoam",
                            FighterId = 1,
                            Hp = 0,
                            Name = "Bicycle helmet",
                            Price = 20,
                            Str = 0,
                            TypeOfGear = 0,
                            Xp = 0
                        },
                        new
                        {
                            Id = 3,
                            Def = 3,
                            Description = "Shiny metal headpiece",
                            FighterId = 1,
                            Hp = 0,
                            Name = "Steel helmet",
                            Price = 30,
                            Str = 0,
                            TypeOfGear = 0,
                            Xp = 0
                        },
                        new
                        {
                            Id = 4,
                            Def = 1,
                            Description = "Plain cotton shirt",
                            FighterId = 1,
                            Hp = 0,
                            Name = "Cotton Shirt",
                            Price = 10,
                            Str = 0,
                            TypeOfGear = 1,
                            Xp = 0
                        },
                        new
                        {
                            Id = 5,
                            Def = 2,
                            Description = "Armor made of leather",
                            FighterId = 1,
                            Hp = 0,
                            Name = "Leather armor",
                            Price = 20,
                            Str = 0,
                            TypeOfGear = 1,
                            Xp = 0
                        },
                        new
                        {
                            Id = 6,
                            Def = 3,
                            Description = "Armor made of shiny metal",
                            FighterId = 1,
                            Hp = 0,
                            Name = "Metal armor",
                            Price = 30,
                            Str = 10,
                            TypeOfGear = 1,
                            Xp = 0
                        },
                        new
                        {
                            Id = 7,
                            Def = 0,
                            Description = "Simple stick of wood",
                            FighterId = 1,
                            Hp = 0,
                            Name = "Wooden stick",
                            Price = 10,
                            Str = 1,
                            TypeOfGear = 3,
                            Xp = 0
                        },
                        new
                        {
                            Id = 8,
                            Def = 0,
                            Description = "Short standard metal sword",
                            FighterId = 1,
                            Hp = 0,
                            Name = "Short metal sword",
                            Price = 20,
                            Str = 2,
                            TypeOfGear = 3,
                            Xp = 0
                        },
                        new
                        {
                            Id = 9,
                            Def = 0,
                            Description = "Long metal sword",
                            FighterId = 1,
                            Hp = 0,
                            Name = "Long metal sword",
                            Price = 30,
                            Str = 3,
                            TypeOfGear = 3,
                            Xp = 0
                        },
                        new
                        {
                            Id = 10,
                            Def = 1,
                            Description = "Shield made of wood",
                            FighterId = 1,
                            Hp = 0,
                            Name = "Wooden shield",
                            Price = 10,
                            Str = 0,
                            TypeOfGear = 2,
                            Xp = 0
                        },
                        new
                        {
                            Id = 11,
                            Def = 2,
                            Description = "Shield made of metal",
                            FighterId = 1,
                            Hp = 0,
                            Name = "Metal shield",
                            Price = 20,
                            Str = 0,
                            TypeOfGear = 2,
                            Xp = 0
                        },
                        new
                        {
                            Id = 12,
                            Def = 3,
                            Description = "Large shield made of wood",
                            FighterId = 1,
                            Hp = 0,
                            Name = "Large metal shield",
                            Price = 1,
                            Str = 0,
                            TypeOfGear = 2,
                            Xp = 0
                        },
                        new
                        {
                            Id = 13,
                            Def = 1,
                            Description = "Hardened leather cap",
                            FighterId = 2,
                            Hp = 0,
                            Name = "Leather cap",
                            Price = 10,
                            Str = 0,
                            TypeOfGear = 0,
                            Xp = 0
                        },
                        new
                        {
                            Id = 14,
                            Def = 1,
                            Description = "Plain cotton shirt",
                            FighterId = 2,
                            Hp = 0,
                            Name = "Cotton Shirt",
                            Price = 10,
                            Str = 0,
                            TypeOfGear = 1,
                            Xp = 0
                        },
                        new
                        {
                            Id = 15,
                            Def = 0,
                            Description = "Simple stick of wood",
                            FighterId = 2,
                            Hp = 0,
                            Name = "Wooden stick",
                            Price = 10,
                            Str = 1,
                            TypeOfGear = 3,
                            Xp = 0
                        },
                        new
                        {
                            Id = 16,
                            Def = 1,
                            Description = "Shield made of wood",
                            FighterId = 2,
                            Hp = 0,
                            Name = "Wooden shield",
                            Price = 10,
                            Str = 0,
                            TypeOfGear = 2,
                            Xp = 0
                        },
                        new
                        {
                            Id = 17,
                            Def = 1,
                            Description = "Hardened leather cap",
                            FighterId = 3,
                            Hp = 0,
                            Name = "Leather cap",
                            Price = 10,
                            Str = 0,
                            TypeOfGear = 0,
                            Xp = 0
                        },
                        new
                        {
                            Id = 18,
                            Def = 1,
                            Description = "Plain cotton shirt",
                            FighterId = 3,
                            Hp = 0,
                            Name = "Cotton Shirt",
                            Price = 10,
                            Str = 0,
                            TypeOfGear = 1,
                            Xp = 0
                        },
                        new
                        {
                            Id = 19,
                            Def = 0,
                            Description = "Simple stick of wood",
                            FighterId = 3,
                            Hp = 0,
                            Name = "Wooden stick",
                            Price = 10,
                            Str = 1,
                            TypeOfGear = 3,
                            Xp = 0
                        },
                        new
                        {
                            Id = 20,
                            Def = 1,
                            Description = "Shield made of wood",
                            FighterId = 3,
                            Hp = 0,
                            Name = "Wooden shield",
                            Price = 10,
                            Str = 0,
                            TypeOfGear = 2,
                            Xp = 0
                        },
                        new
                        {
                            Id = 21,
                            Def = 1,
                            Description = "Hardened leather cap",
                            FighterId = 4,
                            Hp = 0,
                            Name = "Leather cap",
                            Price = 10,
                            Str = 0,
                            TypeOfGear = 0,
                            Xp = 0
                        },
                        new
                        {
                            Id = 22,
                            Def = 1,
                            Description = "Plain cotton shirt",
                            FighterId = 4,
                            Hp = 0,
                            Name = "Cotton Shirt",
                            Price = 10,
                            Str = 0,
                            TypeOfGear = 1,
                            Xp = 0
                        },
                        new
                        {
                            Id = 23,
                            Def = 0,
                            Description = "Simple stick of wood",
                            FighterId = 4,
                            Hp = 0,
                            Name = "Wooden stick",
                            Price = 10,
                            Str = 1,
                            TypeOfGear = 3,
                            Xp = 0
                        },
                        new
                        {
                            Id = 24,
                            Def = 1,
                            Description = "Shield made of wood",
                            FighterId = 4,
                            Hp = 0,
                            Name = "Wooden shield",
                            Price = 10,
                            Str = 0,
                            TypeOfGear = 2,
                            Xp = 0
                        },
                        new
                        {
                            Id = 25,
                            Def = 1,
                            Description = "Hardened leather cap",
                            FighterId = 5,
                            Hp = 0,
                            Name = "Leather cap",
                            Price = 10,
                            Str = 0,
                            TypeOfGear = 0,
                            Xp = 0
                        },
                        new
                        {
                            Id = 26,
                            Def = 1,
                            Description = "Plain cotton shirt",
                            FighterId = 5,
                            Hp = 0,
                            Name = "Cotton Shirt",
                            Price = 10,
                            Str = 0,
                            TypeOfGear = 1,
                            Xp = 0
                        },
                        new
                        {
                            Id = 27,
                            Def = 0,
                            Description = "Simple stick of wood",
                            FighterId = 5,
                            Hp = 0,
                            Name = "Wooden stick",
                            Price = 10,
                            Str = 1,
                            TypeOfGear = 3,
                            Xp = 0
                        },
                        new
                        {
                            Id = 28,
                            Def = 1,
                            Description = "Shield made of wood",
                            FighterId = 5,
                            Hp = 0,
                            Name = "Wooden shield",
                            Price = 10,
                            Str = 0,
                            TypeOfGear = 2,
                            Xp = 0
                        });
                });

            modelBuilder.Entity("Gladiator.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Gold")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique()
                        .HasFilter("[ApplicationUserId] IS NOT NULL");

                    b.ToTable("UserGladiator");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = "2860a746-0879-412d-aadf-5893e2edfd00",
                            Gold = 0,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = "da3f716e-dc6a-4988-b43e-f35f2ed7ea94",
                            Gold = 100,
                            Name = "Numero uno"
                        },
                        new
                        {
                            Id = 3,
                            ApplicationUserId = "66d374f7-8e54-417e-9800-57a5a686f4aa",
                            Gold = 100,
                            Name = "Dos Desperado"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "334d04ff-98cd-4ffb-ad18-492a4ffc572c",
                            ConcurrencyStamp = "f28eb14c-62c0-47f5-8125-ab70d5c0af33",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "4e11c257-3fe9-46c2-ae90-8166b7a2aac2",
                            ConcurrencyStamp = "03302d51-fa8e-4aec-951a-ae2fc5fa896c",
                            Name = "Player",
                            NormalizedName = "PLAYER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "2860a746-0879-412d-aadf-5893e2edfd00",
                            RoleId = "334d04ff-98cd-4ffb-ad18-492a4ffc572c"
                        },
                        new
                        {
                            UserId = "da3f716e-dc6a-4988-b43e-f35f2ed7ea94",
                            RoleId = "4e11c257-3fe9-46c2-ae90-8166b7a2aac2"
                        },
                        new
                        {
                            UserId = "66d374f7-8e54-417e-9800-57a5a686f4aa",
                            RoleId = "4e11c257-3fe9-46c2-ae90-8166b7a2aac2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Gladiator.Models.Fight", b =>
                {
                    b.HasOne("Gladiator.Models.Fighter", "Adversary")
                        .WithMany("AdversaryFights")
                        .HasForeignKey("AdversaryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Gladiator.Models.Arena", "FightingArena")
                        .WithMany("Fights")
                        .HasForeignKey("ArenaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Gladiator.Models.Fighter", "Challenger")
                        .WithMany("ChallengerFights")
                        .HasForeignKey("ChallengerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Gladiator.Models.Fighter", "WinnerFighter")
                        .WithMany("WinnerFights")
                        .HasForeignKey("WinnerFighterId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("Gladiator.Models.Fighter", b =>
                {
                    b.HasOne("Gladiator.Models.User", "User")
                        .WithMany("Fighters")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gladiator.Models.Modifiers", b =>
                {
                    b.HasOne("Gladiator.Models.Fighter", "Fighter")
                        .WithMany("Modifiers")
                        .HasForeignKey("FighterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gladiator.Models.User", b =>
                {
                    b.HasOne("Gladiator.Models.ApplicationUser", "ApplicationUser")
                        .WithOne("Player")
                        .HasForeignKey("Gladiator.Models.User", "ApplicationUserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Gladiator.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Gladiator.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gladiator.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Gladiator.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
